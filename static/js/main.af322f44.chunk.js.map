{"version":3,"sources":["utils/getter.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getter","key","o","getter2","k1","k2","dot","tuple","ts","fromIO","io","T","sync","emitterURI","Symbol","subscribe","type","el","S","fromSource","M","managed","chain","bracket","accessM","_","su","queueUtils","next","ops","hasCB","unsubscribe","addEventListener","fromEvent","fn","a","_tag","emitter","until","emitterLive","cb","document","removeEventListener","canvasUri","circle","x","y","r","sa","ea","pipe","zip","pure","Rnd","Math","PI","strokeStyle","fillStyle","lineWidth","beginPath","arc","stroke","fill","clear","clearRect","canvas","width","height","waitForKeyPress","keyCode","filter","event","takeWhile","constant","drain","clicker","R","log","encaseEffect","fork","drawCirclesOnClick","canvasEl","s","stream","wrappedUntil","as","wrappedStream","map","value","mergeAll","wrapped","takeUntil_","e","offsetX","offsetY","D","IO","date","collectArray","output","programA","Do","effect","bind","bindL","flow","fiber","onInterrupted","interrupt","return","programC","letL","circles","do","reduce","acc","index","prev","ms","push","delay","b","done","doL","proggy","forever","App","ref","React","useRef","useState","setSize","useEffect","setTimeout","current","parentElement","console","getBoundingClientRect","ctx","getContext","program","constVoid","provideS","provideConsole","run","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af322f44.chunk.js","sourcesContent":["/**\r\n * @packageDocumentation\r\n * @module utils\r\n */\r\n\r\n/**\r\n * Type that describes a function that returns\r\n * the value of on object's property given\r\n *\r\n * @typeparam TKey The key or property name the function should read and return from a given object.\r\n * @typeparam TValue The value type\r\n * @typeparam TObject The object type\r\n */\r\nexport type Getter<TKey extends string> = <\r\n  TValue,\r\n  TObject extends {\r\n    [P in TKey]: TValue;\r\n  }\r\n>(\r\n  o: TObject\r\n) => TObject[TKey];\r\n\r\n/**\r\n *\r\n * @param key\r\n */\r\nexport const getter = <K extends string>(key: K): Getter<K> => <\r\n  T,\r\n  O extends { [P in K]: T }\r\n>(\r\n  o: O\r\n) => o[key];\r\n\r\nexport const getter2 = <K1 extends string, K2 extends string>(\r\n  k1: K1,\r\n  k2: K2\r\n) => <T, O extends { [P in K1]: { [R in K2]: T } }>(o: O) => o[k1][k2];\r\n\r\nexport const dot = getter;\r\nexport const dot2 = getter2;\r\nexport const pluck = getter;\r\nexport const pluck2 = getter2;\r\n\r\nexport const getEventCurrentTargetValue = dot2(\"detail\", \"value\");\r\n","import \"./App.scss\";\n\nimport { effect as T, stream as S, managed as M } from \"@matechs/effect\";\nimport { log, Console, provideConsole } from \"@matechs/console\";\nimport * as E from \"fp-ts/lib/Either\";\nimport * as Rnd from \"fp-ts/lib/Random\";\nimport * as D from \"fp-ts/lib/Date\";\nimport * as R from \"fp-ts/lib/Reader\";\nimport * as O from \"fp-ts/lib/Option\";\nimport * as IO from \"fp-ts/lib/IO\";\n\nimport React from \"react\";\nimport { pipe } from \"fp-ts/lib/pipeable\";\n// import { fromEvent } from \"rxjs\";\n// import { encaseObservable } from \"@matechs/rxjs\";\nimport { constVoid, constant, flow } from \"fp-ts/lib/function\";\nimport { Do } from \"fp-ts-contrib/lib/Do\";\nimport { dot2, dot } from \"./utils/getter\";\nimport { fst, snd } from \"fp-ts/lib/ReadonlyTuple\";\n\ntype IO<A> = IO.IO<A>;\n\nconst tuple = <T extends any[]>(...ts: T) => ts;\n\n/**\n * Take elements from a stream until a given effect resolves.\n *\n * @param until The effect that will terminate the stream\n * @param stream The stream\n */\nfunction takeUntil_<R1, E1, R2, E2, A>(\n  stream: S.Stream<R1, E1, A>,\n  until: T.Effect<R2, E2, any>\n) {\n  type Wrapped = { type: \"until\" } | { type: \"stream\"; value: A };\n\n  const wrappedUntil = S.as<Wrapped>({ type: \"until\" })(S.encaseEffect(until));\n\n  const wrappedStream = pipe(\n    stream,\n    S.map((value): Wrapped => ({ type: \"stream\", value }))\n  );\n\n  return pipe(\n    S.mergeAll([wrappedUntil as any, wrappedStream as any] as S.Stream<\n      R1 & R2,\n      E1 | E2,\n      Wrapped\n    >[]),\n    S.takeWhile((wrapped) => wrapped.type === \"stream\"),\n    S.filter(\n      (wrapped): wrapped is Extract<Wrapped, { type: \"stream\" }> =>\n        wrapped.type === \"stream\"\n    ),\n    S.map((wrapped) => (wrapped as Extract<Wrapped, { type: \"stream\" }>).value)\n  );\n}\n\nexport function takeUntil<R2, E2>(until: T.Effect<R2, E2, any>) {\n  return function <R1, E1, A>(s: S.Stream<R1, E1, A>) {\n    return takeUntil_(s, until);\n  };\n}\n\nfunction fromIO<T>(io: IO<T>) {\n  return T.sync(() => io());\n}\n\n// Emitter\n\nconst emitterURI = Symbol();\n\ntype EventFor<TEventType extends string> = TEventType extends\n  | \"keypress\"\n  | \"keyup\"\n  | \"keydown\"\n  ? KeyboardEvent\n  : TEventType extends \"click\" | \"dblclick\"\n  ? MouseEvent\n  : Event;\n\ntype EventHandler<TEventType extends string> = (\n  evt: EventFor<TEventType>\n) => void;\n\ninterface Emitter {\n  [emitterURI]: {\n    fromEvent: <TEventType extends string>(\n      type: TEventType\n    ) => (cb: EventHandler<TEventType>) => T.Effect<T.NoEnv, never, void>;\n    addEventListener: <THTMLElement extends HTMLElement>(\n      el: THTMLElement\n    ) => <TEventType extends string>(\n      type: TEventType\n    ) => (cb: EventHandler<TEventType>) => T.Effect<T.NoEnv, never, void>;\n  };\n}\n\n// Events\nexport function subscribe<\n  TEventType extends string,\n  THTMLElement extends HTMLElement\n>(type: TEventType, el?: THTMLElement) {\n  return S.fromSource(\n    M.managed.chain(\n      M.bracket(\n        T.accessM((_: Emitter) =>\n          T.sync(() => {\n            const { next, ops, hasCB } = S.su.queueUtils<\n              never,\n              EventFor<TEventType>\n            >();\n\n            const fn = el\n              ? _[emitterURI].addEventListener(el)\n              : _[emitterURI].fromEvent;\n\n            return {\n              unsubscribe: fn(type)((a) => next({ _tag: \"offer\", a })),\n              ops,\n              hasCB,\n            };\n          })\n        ),\n        dot(\"unsubscribe\")\n      ),\n      ({ ops, hasCB }) => S.su.emitter(ops, hasCB)\n    )\n  );\n}\n\nconst emitterLive: Emitter = {\n  [emitterURI]: {\n    fromEvent: <TEventType extends string>(type: TEventType) => (\n      cb: EventHandler<TEventType>\n    ) => {\n      document.addEventListener(type, cb as any);\n\n      return T.sync(() => document.removeEventListener(type, cb as any));\n    },\n    addEventListener: <THTMLElement extends HTMLElement>(el: THTMLElement) => <\n      TEventType extends string\n    >(\n      type: TEventType\n    ) => (cb: EventHandler<TEventType>) => {\n      el.addEventListener(type, cb as any);\n\n      return T.sync(() => el.removeEventListener(type, cb as any));\n    },\n  },\n};\n\n// Canvas\nconst canvasUri = Symbol();\n\ninterface Canvas {\n  [canvasUri]: CanvasRenderingContext2D;\n}\n\n/**\n * circle :: number -> number -> number -> Effect Canvas never (number, number, number)\n *\n * Draws a circle on the canvas. X, y, and radius are returned again.\n */\nconst circle = (x: number, y: number, r: number, sa?: number, ea?: number) =>\n  T.accessM((_: Canvas) =>\n    pipe(\n      T.zip(\n        sa ? T.pure(sa) : fromIO(Rnd.randomInt(0, 360)),\n        ea\n          ? T.pure(ea)\n          : fromIO(Rnd.randomInt((Math.PI / 10) * 1000, Math.PI * 1000))\n      ),\n      T.chain(([sa, ea]) =>\n        T.sync(() => {\n          _[canvasUri].strokeStyle = `rgb(${Rnd.randomInt(\n            0,\n            255\n          )()}, ${Rnd.randomInt(0, 255)()}, ${Rnd.randomInt(0, 255)()})`;\n          _[canvasUri].fillStyle = `rgba(${Rnd.randomInt(\n            0,\n            255\n          )()}, ${Rnd.randomInt(0, 255)()}, ${Rnd.randomInt(0, 255)()}, ${\n            Rnd.randomInt(0, 100)() / 100\n          })`;\n          _[canvasUri].lineWidth = 2;\n          _[canvasUri].beginPath();\n          _[canvasUri].arc(x, y, r, sa, ea / 1000);\n          _[canvasUri].stroke();\n          _[canvasUri].fill();\n          return tuple(x, y, r, sa, ea);\n        })\n      )\n    )\n  );\n\n/**\n * clear :: T.Effect Canvas never void\n *\n * Clears a canvas\n */\nconst clear = T.accessM((_: Canvas) =>\n  T.sync(() => {\n    _[canvasUri].clearRect(\n      0,\n      0,\n      _[canvasUri].canvas.width,\n      _[canvasUri].canvas.height\n    );\n  })\n);\n\n/**\n * waitForKeyPress :: number -> Effect NoEnv never void\n *\n * Given a keyCode returns an effect that resolves once the user\n * presses a key on the keyboard matching the key code.\n */\nconst waitForKeyPress = (keyCode: number) =>\n  pipe(\n    subscribe(\"keyup\"),\n    S.filter((event) => event.keyCode === keyCode),\n    S.takeWhile(constant(false)),\n    S.drain\n  );\n\nconst clicker = pipe(\n  subscribe(\"click\"),\n  S.chain(pipe(R.ask<MouseEvent>(), R.map(log), R.map(S.encaseEffect))),\n  S.drain,\n  T.fork\n);\n\nconst drawCirclesOnClick = pipe(\n  // Read canvas element from environment\n  T.accessM((_: Canvas) => T.pure(_[canvasUri].canvas)),\n  // Turn it into a stream\n  S.encaseEffect,\n  // Flat map the 1 element stream containing the canvas element to a stream of mouse clicks\n  S.chain((canvasEl) =>\n    // encaseObservable(fromEvent<MouseEvent>(canvasEl, \"click\"), constVoid)\n    subscribe(\"click\", canvasEl)\n  ),\n  // Take mouse clicks until the user presses d or D\n  takeUntil(waitForKeyPress(68)),\n  // Map the mouse event to it's coordinates\n  S.map((e) => tuple(e.offsetX, e.offsetY)),\n  // Flat map the stream of coordinates to\n  /// a stream that draws a circle\n  S.chain(([x, y]) =>\n    pipe(\n      // Get a random radius for the circle to draw\n      Rnd.randomInt(30, 200),\n      // Convert IO to Effect\n      fromIO,\n      // Map effect that produces a random int to an effect that draws a circle\n      T.chain((r) => circle(x, y, r)),\n      // Turn the effect into a stream\n      S.encaseEffect\n    )\n  ),\n  // Turn the stream producing x, y, and radius into\n  // a stream producing x, y, radius, and the timestamp the circle was drawn\n  S.chain(([x, y, r, sa, ea]) =>\n    S.encaseEffect(\n      fromIO(\n        pipe(\n          // Get the timestamp\n          D.now, // IO<number>\n          // Map it to a tuple of x, y, radius, and date\n          IO.map((date) => tuple(x, y, r, sa, ea, date))\n        )\n      )\n    )\n  ),\n  // Turn stream into an effect of an array of values\n  S.collectArray,\n  T.chain((output) => T.as(log(\"Done drawing!\"), output))\n);\n\nconst programA = Do(T.effect)\n  .bind(\"fiber\", clicker)\n  .bindL(\n    \"x\",\n    flow(dot(\"fiber\"), (fiber) =>\n      pipe(drawCirclesOnClick, T.onInterrupted(fiber.interrupt))\n    )\n  )\n  .return(dot(\"x\"));\n\nconst programC = Do(T.effect)\n  // Let the user draw circles until they press d or D\n  .bind(\"circles\", programA)\n  .letL(\n    \"proggy\",\n    flow(dot(\"circles\"), (circles) =>\n      Do(T.effect)\n        // Wait for the user to press r or R (replay)\n        .do(waitForKeyPress(82))\n        .do(log(\"Replaying..\"))\n        // Clear the canvas\n        .do(clear)\n        .do(\n          // Flat map the list of circle coordinates and dates to\n          // a program that redraws the circles in the same amount of time\n          circles\n            .reduce((acc, next, index) => {\n              // Determin the number of milliseconds the program should\n              // delay drawing the next circle based on the previous\n              // circle's timestamp.\n              const prev = circles[index - 1];\n              const ms = prev ? (next[5] - prev[5]) / 2 : 0;\n\n              // Create an effect that redraws the circle after a delay\n              acc.push(\n                T.delay(circle(next[0], next[1], next[2], next[3], next[4]), ms)\n              );\n              return acc;\n            }, [] as Array<ReturnType<typeof circle>>)\n            // Turn the list of effects into a single chained effect (andThen)\n            .reduce((a, b) =>\n              pipe(\n                a,\n                T.chain(() => b)\n              )\n            )\n        )\n        .done()\n    )\n  )\n  .doL(flow(dot(\"proggy\"), (proggy) => pipe(proggy, T.forever)))\n  .done();\n\nfunction App() {\n  const ref = React.useRef<HTMLCanvasElement | null>(null);\n  const [[width, height], setSize] = React.useState(tuple(0, 0));\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      if (ref.current && ref.current.parentElement) {\n        console.log(ref.current.parentElement.getBoundingClientRect());\n        const {\n          width,\n          height,\n        } = ref.current.parentElement.getBoundingClientRect();\n        setSize(tuple(width, height));\n      }\n    }, 1);\n  }, []);\n\n  React.useEffect(() => {\n    if (ref.current) {\n      const ctx = ref.current.getContext(\"2d\");\n\n      if (ctx) {\n        const program: T.Effect<Canvas & Console & Emitter, never, void> = Do(\n          T.effect\n        )\n          // Spawn a program that allows the user to draw circles and replay their drawing\n          .bind(\"fiber\", T.fork(programC))\n          // Wait for the user to press x or X to cancel\n          .do(waitForKeyPress(88))\n          // Interrupt the fiber\n          .doL(({ fiber }) => fiber.interrupt)\n          // Clear the canvas\n          .do(clear)\n          // Reboot\n          .doL(() => program)\n          .return(constVoid);\n\n        pipe(\n          program,\n          T.provideS(emitterLive),\n          T.provideS({ [canvasUri]: ctx }),\n          provideConsole,\n          T.run\n        );\n      }\n    }\n  }, []);\n\n  return (\n    <div id=\"app\">\n      <section>\n        <canvas height={height} width={width} ref={ref}></canvas>\n      </section>\n      <footer>\n        <ul>\n          <li>\n            Press <i>x</i> to reset.\n          </li>\n          <li>\n            Press <i>d</i> to commit.\n          </li>\n          <li>\n            Press <i>r</i> to replay <i>(after commiting.)</i>.\n          </li>\n        </ul>\n        <p>\n          You can redraw as many times as you want after committing. Size and\n          coordinates are preserved. Colours are not. Redrawing happens at twice\n          the speed you drew.\n        </p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}